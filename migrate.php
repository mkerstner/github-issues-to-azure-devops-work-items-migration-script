<?php

/**
 * A simple script to migrate GitHub Issues to Azure Devops Work Items via the Devops Web API.
 *
 * To be run from the command line.
 *
 * Mandatory arguments
 *
 * --import input file, relative to this file. See below for the required format of this file
 * --pat GitHub PAT with at least "repo" access
 * --version DevOps API version, e.g. "6.0-preview.3"
 * --organization DevOps organization, e.g. "my-org"
 * --project DevOps project, e.g. "Your Project"
 * --team DevOps project team, e.g. "My-Team"
 * --verbose Whether to display debug logs
 *
 * Optional settings
 *
 * 1) list of user mappings in case you want don't want to use the user specified in the original GitHub issue
 *    See getUser()
 *
 * Additional notes
 *
 * The input file specified must be compliant to the format generated by the githubCsvTools
 * @see https://github.com/gavinr/github-csv-tools
 *
 * @author Matthias Kerstner <mke@nuki.io>
 * @version 1.0.0
 *
 * @see ADO CLI: https://docs.microsoft.com/en-us/azure/devops/cli/?view=azure-devops
 * @see https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/work%20items/update?view=azure-devops-rest-6.0#examples
 */

$requiredOptions = array("import:", "pat:", "version:", "organization:", "project:", "team:");

$cliOptions = getopt('', $requiredOptions);

foreach ($requiredOptions as $v) {
    $arg = str_replace(':', '', $v);

    if (empty($cliOptions[$arg])) {
        die("\nMissing required value for argument " . $arg . "\n\n");
    }
}

$inputFile = "./" . basename($cliOptions['import']);
$apiPat = $cliOptions['pat'];
$apiVersion = $cliOptions['version'];
$organization = $cliOptions['organization'];
$project = $cliOptions['project'];
$projectTeam = $cliOptions['team'];
$projectAreaPath = $project . '\\\\' . $projectTeam;
$verboseOutput = !empty($cliOptions['verbose']);

/**
 * Optional list of user mappings from GitHub to DevOps
 */
$users = array(
    'githubuser' => 'devops.user@somecorp.com'
);

/**
 * @param string $user
 * @param array $users
 * @return string
 */
function getUser(string $user, array $users): string
{
    debug('Checking for user ' . $user);

    if (isset($users[$user])) {
        return $users[$user];
    }

    debug('Found user ' . $users[$user]);

    return $user;
}

/**
 *
 * @param string $apiPat
 * @param string $type
 * @param string $url
 * @param array $data
 * @param string|null $contentType
 * @return stdClass
 */
function doRequest(string $apiPat, string $type, string $url, array $data, ?string $contentType = "application/json-patch+json"): stdClass
{
    $ci = curl_init();

    curl_setopt($ci, CURLOPT_URL, $url);
    curl_setopt($ci, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ci, CURLOPT_TIMEOUT, 30);
    curl_setopt($ci, CURLOPT_CONNECTTIMEOUT, 30);
    curl_setopt($ci, CURLOPT_SSL_VERIFYHOST, false);
    curl_setopt($ci, CURLOPT_SSL_VERIFYPEER, false);

    // uncomment to enable debugging
    //curl_setopt($ci, CURLOPT_VERBOSE, true);
    //curl_setopt($ci, CURLOPT_STDERR, $verbose = fopen('php://temp', 'rw+'));

    // for GETting data
    // $reqContentType = "application/json";

    // for POSTing/PATCHing data
    $reqContentType = $contentType;

    curl_setopt($ci, CURLOPT_HTTPHEADER, array(
            "Content-type: $reqContentType",
            "Authorization: Basic " . base64_encode(":" . $apiPat)
        )
    );

    if ($type === "POST") {
        $payload = json_encode($data);
        //var_dump($payload);
        curl_setopt($ci, CURLOPT_POSTFIELDS, $payload);
    } else if ($type === "PATCH") {
        $payload = json_encode($data);
        //var_dump($payload);
        curl_setopt($ci, CURLOPT_POSTFIELDS, $payload);
        curl_setopt($ci, CURLOPT_CUSTOMREQUEST, 'PATCH');
    }

    $buffer = curl_exec($ci);

    // uncomment to enable debugging
    // echo "Verbose information:\n", !rewind($verbose), stream_get_contents($verbose), "\n";

    curl_close($ci);

    $wit = json_decode($buffer);

    debug("CREATED: " . $wit->id);

    return $wit;
}

/**
 * @param string $apiPat
 * @param string $url
 * @param array $data
 * @param string|null $contentType
 * @return stdClass
 */
function doPost(string $apiPat, string $url, array $data, ?string $contentType = "application/json-patch+json"): stdClass
{
    return doRequest($apiPat, "POST", $url, $data, $contentType);
}

/**
 * @param string $apiPat
 * @param string $url
 * @param array $data
 * @param string|null $contentType
 * @return stdClass
 */
function doPatch(string $apiPat, string $url, array $data, ?string $contentType = "application/json-patch+json"): stdClass
{
    return doRequest($apiPat, "PATCH", $url, $data, $contentType);
}

/**
 * @param string $apiPat
 * @param string $url
 * @param array $data
 * @param string|null $contentType
 * @return stdClass
 */
function doGet(string $apiPat, string $url, array $data, ?string $contentType = "application/json-patch+json"): stdClass
{
    return doRequest($apiPat, "GET", $url, $data, $contentType);
}

/**
 * @param string $msg
 */
function debug(string $msg): void
{
    echo "\n" . $msg;
}

/**
 * @param string $apiPat
 * @param string $url
 * @param int $witId
 * @param array $comments
 */
function addComments(string $apiPat, string $url, int $witId, array $comments): void
{
    debug("ABOUT TO ADD " . count($comments) . " COMMENTS...");

    foreach ($comments as $comment) {

        if (empty($comment['comment.body']) || $comment['comment.body'] === "null") {
            debug("IGNORING empty comment for " . $witId . ": '" . $comment['comment.body'] . "'");
            continue;
        }

        $payload = array(array(
            "op" => "add",
            "path" => "/fields/System.History",
            "value" => "<b>" . $comment['comment.user']
                . "</b> commented on <b>"
                . $comment['comment.created_at']
                . "</b><br/><br/>"
                . nl2br($comment['comment.body'])));

        debug("ADDING comment for " . $witId); //." '".$comment['comment.body']."' ...");

        $commentCreated = doPatch($apiPat, $url, $payload);

        debug("DONE " . $commentCreated->commentId);
    }
}

// row 1 contains column information (header)
$headers = array();

$row = 1;

// last issue.id and created wit ID
$lastWitId = null;
$lastIssueId = null;
$lastIssueIdCounter = 0;
$lastIssueIdComments = array();

// ignore counter
$ignoreCounter = 0;

// URL prefix for Web API calls
$urlPrefix = 'https://dev.azure.com/' . $organization . '/' . str_replace(' ', '%20', $project) . '/';

/**
 * Process input file
 */
if (!file_exists($inputFile) || !is_readable($inputFile)) {
    die("\nFailed to read input file '" . $inputFile . "'\n\n");
}

if (($handle = fopen($inputFile, "r")) !== FALSE) {

    debug("\n===============================");
    debug("Configuration used:");
    debug("API version: " . $apiVersion);
    debug("Organization: " . $organization);
    debug("Project: " . $project);
    debug("Project Team: " . $projectTeam);
    debug("Project Area Path: " . $projectAreaPath);
    debug("===============================");
    debug("\n");

    // read 1 line and extract columns
    while (($data = fgetcsv($handle, 0, ",")) !== FALSE) {

        $num = count($data);

        if ($row >= 2 && $num !== count($headers)) { // validate column count against header row
            debug("IGNORING " . $data['issue.id'] . " - Invalid column count detected: "
                . count($headers) . ' vs. ' . $num);
            $ignoreCounter++; // ignore invalid row and continue to next
            continue;
        }

        // read columns for current line
        for ($c = 0; $c < $num; $c++) {

            if ($row < 2) { // add row 1 to $headers
                $headers[] = $data[$c];
            }

            $data[$headers[$c]] = $data[$c];
        }

        if ($row < 2) {
            $row++;
            continue; // ignore header row for further processing
        }

        // we are still processing $lastIssueId -> add comments to $lastIssueIdComments
        if (!empty($lastIssueId) && $lastIssueId === $data['issue.id']) {

            $lastIssueIdCounter++; // ignore first row (header)

            if (!empty($data['comment.body']) && $data['comment.body'] !== 'null') {

                debug("PRE-ADDING comment for " . $data['issue.id'] . "..."); //: '".$data['comment.body']."'";

                $lastIssueIdComments[] = array(
                    'comment.user' => $data['comment.user'],
                    'comment.created_at' => $data['comment.created_at'],
                    'comment.body' => $data['comment.body']);
            } else {
                debug("IGNORING comment for " . $data['issue.id']);
            }

            continue;
        }

        debug("PROCESSING " . $data['issue.id'] . "...");

        debug("CHECKING FOR DATA FROM (POTENTIAL) PREVIOUS WIT...");

        if (count($lastIssueIdComments)) {
            $commentUrl = $urlPrefix
                . '_apis/wit/workItems/' . $lastWitId
                . '?api-version=' . $apiVersion . '&bypassRules=true';

            addComments($apiPat, $commentUrl, $lastWitId, $lastIssueIdComments);

            // reset counters
            $lastIssueIdCounter = 1;
            $lastIssueIdComments = array();
        }

        // check for Pull Request and ignore line
        if (mb_strpos($data['issue.html_url'], '/pull/') !== false) {
            debug("IGNORING " . $data['issue.id'] . " - Pull request detected");
            $ignoreCounter++;
            continue;
        }

        $payload = array(
            // FIELD OVERVIEW: https://docs.microsoft.com/en-us/azure/devops/boards/work-items/guidance/work-item-field?view=azure-devops
            // System.CreatedDate
            array("op" => "add",
                "path" => "/fields/System.CreatedDate",
                "value" => $data['issue.created_at']),
            // System.CreatedBy
            array("op" => "add",
                "path" => "/fields/System.CreatedBy",
                "value" => getUser($data['issue.user'], $users)),
            // Assigned To
            array("op" => "add",
                "path" => "/fields/System.AssignedTo",
                "value" => getUser($data['issue.user'], $users)),
            // System.AreaPath -> TEAM needs to exist first if you want to specify it, otherwise leave it empty to default to project area
            array("op" => "add",
                "path" => "/fields/System.AreaPath",
                "value" => $projectAreaPath),
            // Title
            array("op" => "add",
                "path" => "/fields/System.Title",
                "value" => $data['issue.title']
                    . " (GH#" . $data['issue.number'] . ")")
        );

        // Description
        $description = array("op" => "add",
            "path" => "/fields/System.Description",
            "value" => nl2br($data['issue.body'])
                // add reference to old GitHub Issue
                . "<br/><br/><br/><b>Imported from GitHub Issue:</b><br/><br/>"
                . "Issue#: <a href=\"" . $data['issue.html_url'] . "\">" . $data['issue.number'] . "</a><br/>"
                . "Creator: " . $data['issue.user'] . "<br/>"
                . "URL: <a href=\"" . $data['issue.html_url'] . "\">" . $data['issue.html_url'] . "</a><br/>");

        // place to add your custom handling for Description content, see examples below
        $description['value'] = str_replace("### User Story", "<b>User Story</b><br/>", $description['value']);
        $description['value'] = str_replace("**User Story**", "<b>User Story</b><br/>", $description['value']);
        $description['value'] = str_replace("### Test Cases", "<b>Test Cases</b><br/>", $description['value']);
        $description['value'] = str_replace("**Test Cases**", "<b>Test Cases</b><br/>", $description['value']);
        $description['value'] = str_replace("**Test cases**", "<b>Test Cases</b><br/>", $description['value']);
        $description['value'] = str_replace("**Acceptance criteria:**", "<b>Acceptance criteria</b><br/>", $description['value']);
        $description['value'] = str_replace("**Acceptance criteria**", "<b>Acceptance criteria</b><br/>", $description['value']);
        $description['value'] = str_replace("**Acceptance Criteria**", "<b>Acceptance criteria</b><br/>", $description['value']);
        $description['value'] = str_replace("### Acceptance criteria", "<b>Acceptance criteria</b><br/>", $description['value']);
        $description['value'] = str_replace("### Acceptance Criteria", "<b>Acceptance criteria</b><br/>", $description['value']);

        $payload[] = $description;

        // Tags
        $tags = array(
            "op" => "add",
            "path" => "/fields/System.Tags",
            "value" => str_replace(',', ';', $data['issue.labels']));

        // Milestone -> set as Tag
        if (!empty($data['issue.milestone.title']) && $data['issue.milestone.title'] !== "null") {
            $tags['value'] .= (!empty($tags['value']) ? ';' : '')
                . $data['issue.milestone.title'];
        }

        $payload[] = $tags;

        // State => New, Verify, Active, Resolved, Releasable, Closed, Removed
        // @see https://docs.microsoft.com/en-us/azure/devops/boards/work-items/workflow-and-state-categories?view=azure-devops&tabs=scrum-process
        $state = array("op" => "add",
            "path" => "/fields/System.State",
            "value" => '');

        $isClosed = $data['issue.state'] === 'closed';
        $isReleaseable = in_array('Releasable', explode(';', $tags['value']));
        $isResolved = in_array('Resolved', explode(';', $tags['value']));
        $isInProgress = in_array('In Progress', explode(';', $tags['value']));
        $isNew = in_array('Backlog', explode(';', $tags['value'])) || in_array('Ready', explode(';', $tags['value']));

        if ($isClosed) {
            $state['value'] = 'Closed';
        } else {
            if ($isInProgress) {
                $state['value'] = 'Active';
            } else if ($isReleaseable) {
                $state['value'] = 'Releasable';
            } else if ($isResolved) {
                $state['value'] = 'Resolved';
            } else if ($isNew) {
                $state['value'] = 'New';
            } else {
                $state['value'] = 'Active';
            }
        }

        debug('STATE: ' . $state['value']);

        $payload[] = $state;

        // if label Bug is present witType will be Bug
        $isBug = in_array('Bug', explode(';', $tags['value']));

        // Task, User Story, Issue, Bug
        $witType = "User%20Story";

        if ($isBug) {
            $witType = 'Bug';
        }

        $url = $urlPrefix . '_apis/wit/workItems/$' . $witType
            . '?api-version=' . $apiVersion . '&bypassRules=true';

        // finally create wit
        $witCreated = doPost($apiPat, $url, $payload);

        debug("NEXT STEPS for " . $witCreated->id . " (" . $data['issue.id'] . ") pending...");

        // echo "<br/>New ". $data['issue.id']. " vs Old ".$lastIssueId;
        // echo "<br/>lastIssueIdCounter ".$lastIssueIdCounter;
        $lastWitId = $witCreated->id;
        $lastIssueId = $data['issue.id'];
        $row++;
    }

    // always show statistics
    echo "\n\nDONE!";
    echo "\n\n===============================";
    echo "\nProcessed: " . ($row - 1);
    echo "\nIgnored: " . $ignoreCounter;
    echo "\n===============================\n\n";

    fclose($handle);
}

